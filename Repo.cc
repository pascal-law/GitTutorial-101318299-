#include "Repo.h"

Repo::Repo(const string& title, const string& owner) {
	this->title = title;
	this->owner = owner;
	this->fl = new FileList;
}

Repo::~Repo() {
	delete fl;
}

const string& Repo::getTitle() { return title; }
const string& Repo::getOwner() { return owner; }

bool Repo::lessThan(Repo& r) {
	return this->title.compare(r.title);
}

bool Repo::addFile(const string& name, const string& content, Date& date) {
	if (fl->isFull()) return false;
	return fl->add(new File(name, content, date));
}

// FileList's remove() method returns the File pointer (which was generated by "new") but fails to delete that pointer
// the Repo class will do the delete work
bool Repo::removeFile(int index) {
	File* toRemove = fl->remove(index);
	if (toRemove == nullptr) return false;
	delete toRemove;
	return true;
}

int Repo::getNumFiles() {
	return fl->size();
}

void Repo::print() {
	cout << "Title: " << title << endl;
	cout << "Owner: " << owner << endl;
}

void Repo::printFiles() {
	print();
	for (int i = 0; i < getNumFiles(); i++) {
		cout << i << ") ";
		fl->get(i)->print();
	}
}

void Repo::printContents(int index) {
	File* f = fl->get(index);
	if (f != nullptr) {
		f->printContents();
	}
	else {
		cout << "Index is not valid." << endl;
	}
}